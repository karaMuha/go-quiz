package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.60

import (
	"context"
	"fmt"
	"graphql-quiz/cmd/application/commands"
	"graphql-quiz/cmd/graphql/dtos"
	"graphql-quiz/cmd/graphql/generated"
	"net/http"
)

// CreateQuestion is the resolver for the CreateQuestion field.
func (r *mutationResolver) CreateQuestion(ctx context.Context, questionInput dtos.QuestionInput) (*dtos.QuestionResponse, error) {
	question, errResp := r.app.CreateQuestion(ctx, &questionInput)
	if errResp != nil {
		return questionErrResp(errResp)
	}

	var quetionOptionList []*dtos.QuestionOption
	for _, v := range questionInput.Options {
		questionOption, errResp := r.app.CreateQuestionOption(ctx, question.ID, v)
		if errResp != nil {
			return questionErrResp(errResp)
		}

		quetionOptionList = append(quetionOptionList, questionOption)
	}

	question.QuestionOption = quetionOptionList

	return &dtos.QuestionResponse{
		Message: "Successfully created question",
		Status:  http.StatusCreated,
		Data:    question,
	}, nil
}

// UpdateQuestion is the resolver for the UpdateQuestion field.
func (r *mutationResolver) UpdateQuestion(ctx context.Context, id string, questionInput dtos.QuestionInput) (*dtos.QuestionResponse, error) {
	params := &commands.UpdateQuestionParams{
		QuestionID: id,
		Title:      questionInput.Title,
	}

	updatedQuestion, err := r.app.UpdateQuestion(ctx, params)
	if err != nil {
		return questionErrResp(err)
	}

	return &dtos.QuestionResponse{
		Message: "",
		Status:  http.StatusAccepted,
		Data:    updatedQuestion,
	}, nil

}

// DeleteQuestion is the resolver for the DeleteQuestion field.
func (r *mutationResolver) DeleteQuestion(ctx context.Context, id string) (*dtos.QuestionResponse, error) {
	panic(fmt.Errorf("not implemented: DeleteQuestion - DeleteQuestion"))
}

// GetOneQuestion is the resolver for the GetOneQuestion field.
func (r *queryResolver) GetOneQuestion(ctx context.Context, id string) (*dtos.QuestionResponse, error) {
	panic(fmt.Errorf("not implemented: GetOneQuestion - GetOneQuestion"))
}

// GetAllQuestions is the resolver for the GetAllQuestions field.
func (r *queryResolver) GetAllQuestions(ctx context.Context) (*dtos.QuestionResponse, error) {
	panic(fmt.Errorf("not implemented: GetAllQuestions - GetAllQuestions"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
